sudo bluetoothctl
scan on
scan off
pair 98:D3:32:31:60:62
connect 98:D3:32:31:60:62
connect HC-05
sudo ufw disable

sudo ufw status verbose
sudo ufw enable

#include <WiFi.h>

const char* ssid = "LOBAAR";
const char* password = "LOKEpass";
const char* server_ip = "192.168.1.100";  // Remplacez par l'adresse IP de votre PC
const int server_port = 12345;

WiFiClient client;

void setup() {
    Serial.begin(115200);
    WiFi.begin(ssid, password);

    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
    }

    Serial.println("Connected to WiFi");
}

void loop() {
    if (!client.connected()) {
        if (client.connect(server_ip, server_port)) {
            Serial.println("Connected to server");
            client.print("Hello from ESP32");
            client.println();
            delay(1000);
        }
    }
}







####################################################################################
import socket

# Paramètres du serveur
host = '0.0.0.0'  # Adresse IP du serveur (écoute sur toutes les interfaces)
port = 12345       # Port sur lequel le serveur écoute

# Création d'une socket TCP/IP
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
    server_socket.bind((host, port))  # Liaison de la socket à l'adresse et au port
    server_socket.listen()           # Mise en attente des connexions entrantes
    print(f"Serveur en attente de connexion sur {host}:{port}")

    # Accepter une connexion entrante
    client_socket, client_address = server_socket.accept()
    print(f"Connexion entrante de {client_address}")

    # Recevoir des données
    while True:
        data = client_socket.recv(1024)
        if not data:
            break
        print(f"Données reçues : {data.decode('utf-8')}")

    # Fermeture de la connexion
    client_socket.close()

